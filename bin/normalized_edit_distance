#!/usr/bin/env ruby

require File.expand_path(
    File.join(File.dirname(__FILE__), %w[.. lib normalized_edit_distance]))

# Put your code here
require 'trollop'
require 'ap'

opts = Trollop::options do
	version "normalized_edit_distance 0.0.1 (c) 2011 Vicente Bosch Campos"
	banner <<-EOS
normalized_edit_distance (NED) is a command tool to launch a basic NED where the cost functions are the same for all characters.
Usage:
	normalized_edit_distance [options]
	where [options] are:
EOS

opt :x_string, "base string on which to perform the normalized edit distance", :type => :string
opt :y_string, "string against which the normalized edit distance will be calculated ", :type => :string
opt :insertion_factor, "Insertion cost to use in the normalized edit distance", :type => :int, :default => 2
opt :deletion_factor, "Deletion cost to use in the normalized edit distance", :type => :int, :default => 2
opt :substitution_factor, "Substitution cost to use in the normalized edit distance", :type => :int, :default => 3
end

#Defining special considerations for the entry data

Trollop::die :x_string, "base X string was not defined" unless opts[:x_string]
Trollop::die :y_string, "Y string was not defined" unless opts[:y_string]

Trollop::die :insertion_factor, "Insertion operation cost must be greater or equal to 0" unless opts[:insertion_factor] >= 0
Trollop::die :deletion_factor, "Insertion operation cost must be greater or equal to 0" unless opts[:deletion_factor] >= 0
Trollop::die :substitution_factor, "Insertion operation cost must be greater or equal to 0" unless opts[:substitution_factor] >= 0

ap opts

fpned = NormalizedEditDistance::FPNED.new(opts[:x_string],opts[:y_string])

str_cost_func = NormalizedEditDistance::StrincCostFunction.new

str_cost_func[:insert] = opts[:insertion_factor]
str_cost_func[:delete] = opts[:deletion_factor]
str_cost_func[:delete] = opts[:deletion_factor]

fpned.cost_function = str_cost_func

puts fpned.calculate
