#!/usr/bin/env ruby
# encoding: utf-8

require File.expand_path(
    File.join(File.dirname(__FILE__), %w[.. lib normalized_edit_distance]))

# Put your code here
require 'trollop'
require 'ap'

opts = Trollop::options do
	version "text_line_normalized_edit_distance 0.0.1 (c) 2011 Vicente Bosch Campos"
	banner <<-EOS
text_line_normalized_edit_distance (NED) is a command tool to launch a basic NED where the cost functions are the same for all characters.
Usage:
	text_line_normalized_edit_distance [options]
	where [options] are:
EOS

opt :x_file, "hypothesis file with detected lines with which to perform the normalized edit distance", :type => :string
opt :y_file, "original file target line file to perform normalized edit distance ", :type => :string
opt :insertion_factor, "Insertion cost to use in the normalized edit distance", :type => :float, :default => 1.0
opt :deletion_factor, "Deletion cost to use in the normalized edit distance", :type => :float, :default => 1.0
opt :substitution_factor, "Substitution cost to use in the normalized edit distance", :type => :float, :default => 1.0
end

#Defining special considerations for the entry data

Trollop::die :x_file, "hypotheses file name was not defined" unless opts[:x_file]
Trollop::die :x_file, "Indicated hypothesesfile does not exist" unless File.exist?(opts[:x_file])
Trollop::die :y_file, "target file name was not defined" unless opts[:y_file]
Trollop::die :y_file, "Indicated target file does not exist" unless File.exist?(opts[:y_file])

Trollop::die :insertion_factor, "Insertion operation cost must be greater or equal to 0" unless opts[:insertion_factor] >= 0
Trollop::die :deletion_factor, "Insertion operation cost must be greater or equal to 0" unless opts[:deletion_factor] >= 0
Trollop::die :substitution_factor, "Insertion operation cost must be greater or equal to 0" unless opts[:substitution_factor] >= 0


hypothesis_file = NormalizedEditDistance::LineDescriptionFile.new(opts[:x_file])
hypothesis_file.read

target_file = NormalizedEditDistance::LineDescriptionFile.new(opts[:y_file])
target_file.read

fpned = NormalizedEditDistance::FPNED.new(hypothesis_file.line_limits,target_file.line_limits)

ln_cost_func = NormalizedEditDistance::LineCostFunction.new

ln_cost_func[:insert] = opts[:insertion_factor]
ln_cost_func[:delete] = opts[:deletion_factor]
ln_cost_func[:substitute] = opts[:deletion_factor]

fpned.cost_function = ln_cost_func

ap fpned.calculate

fpned.path_to_file("output.txt")
